"""
Django settings for transcendence_backend project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

# Y added
#import os
import json
from os import getenv, makedirs
from django.core.management.utils import get_random_secret_key

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# Y custom if BACKEND_SECRET_KEY not set generate a random one
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv('BACKEND_SECRET_KEY', get_random_secret_key())

# W added
# SECURITY WARNING: keep the secret key used in production secret!
ENCRYPTION_KEY = getenv('ENCRYPTION_KEY')

# Y custom
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv('BACKEND_DEBUG', 'False') == 'True'

# Y custom
ALLOWED_HOSTS = getenv('BACKEND_ALLOWED_HOSTS', '127.0.0.1,localhost').split(",")

# Y added
REST_FRAMEWORK = {
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'accounts_app.authentication.CustomJWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

# Y added 'channels/rest_framework_simplejwt.token_blacklist',/rest_framework/accounts_app/websocket_app/transcendence_app/django_filters/djoser
INSTALLED_APPS = [
    # Third-Party Apps
    "corsheaders",
    'rest_framework',
    'channels',
    'django_filters',
    # APP
    'accounts_app',
    'oauth_app',
    'totp_app',
    'tournament_app',
    'transcendence_app',
    'websocket_app',
    # Django
    'django.contrib.auth',
    'django.contrib.contenttypes',
    #'django.contrib.admin', # adm
    #'django.contrib.sites', # sites
    #'django.contrib.sessions',  # sessions
    #'django.contrib.messages', #  it's typically used with server-rendered templates
    #'django.contrib.staticfiles', # maybe useful
]

# Y added
ASGI_APPLICATION = "transcendence_backend.asgi.application"


CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    #'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    #'django.contrib.auth.middleware.AuthenticationMiddleware',
    #'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'tournament_app.middleware.InternalOnlyMiddleware',
]

ROOT_URLCONF = 'transcendence_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'transcendence_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME':  getenv('BACKEND_POSTGRES_DB'),
        'USER': getenv('BACKEND_POSTGRES_USER'),
        'PASSWORD': getenv('BACKEND_POSTGRES_PASSWORD'),
        'HOST': 'db',
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CORS_ALLOWED_ORIGINS = [
    "https://localhost:8443",
]
CORS_ALLOW_CREDENTIALS = True

OAUTH_SETTINGS = {
	"OAUTH_AUTHORIZE_URL": getenv("OAUTH_AUTHORIZE_URL"),
	"OAUTH_TOKEN_URL": getenv("OAUTH_TOKEN_URL"),
	"OAUTH_CLIENT_ID": getenv("OAUTH_KEY"),
	"OAUTH_CLIENT_SECRET": getenv("OAUTH_SECRET"),
	"OAUTH_REDIRECT_URI": getenv("OAUTH_REDIRECT_URI"),
	"OAUTH_SCOPE": getenv("OAUTH_SCOPE"),
    "OAUTH_REDIRECT_LOGIN": getenv("OAUTH_REDIRECT_LOGIN"),
    "OAUTH_ME": getenv("OAUTH_ME"),
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Y added see TODO
#https://django-rest-framework-simplejwt.readthedocs.io/en/latest/customizing_token_claims.html
# SIMPLE_JWT = {
#   # It will work instead of the default serializer(TokenObtainPairSerializer).
#   "TOKEN_OBTAIN_SERIALIZER": "transcendence_app.serializers.MyTokenObtainPairSerializer",
#   # ...
# }

# Y added
AUTH_USER_MODEL = 'accounts_app.User'

# Y added
MEDIA_URL = '/media/'
MEDIA_ROOT = '/var/www/media'

FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

# Ensure the media directory exists
makedirs(MEDIA_ROOT, exist_ok=True)

# Y added
AUTH_COOKIE_ACCESS = 'access'
AUTH_COOKIE_REFRESH = 'refresh'
AUTH_COOKIE_ACCESS_MAX_AGE = 60 * 5 # 5min
AUTH_COOKIE_REFRESH_MAX_AGE = 60 * 60 * 24 # 24h
AUTH_COOKIE_PATH = '/'
# AUTH_COOKIE_DOMAIN = 'localhost'
AUTH_COOKIE_DOMAIN = None
AUTH_COOKIE_SECURE = True
AUTH_COOKIE_HTTP_ONLY = True
AUTH_COOKIE_SAMESITE = 'Strict' # production will be 'Strict'

# For BlockChain
WEB3_PROVIDER = getenv("WEB3_PROVIDER")
with open("../../../crypto_volume/AddressContract.json") as f:
    CONTRACT_ADDRESS = json.load(f)['address']
ETHEREUM_PRIVATE_KEY = getenv("ETHEREUM_PRIVATE_KEY")
